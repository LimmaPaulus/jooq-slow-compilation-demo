/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables.records


import org.example.db.generated.tables.StaffList
import org.jooq.Field
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.TableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class StaffListRecord() : TableRecordImpl<StaffListRecord>(StaffList.STAFF_LIST), Record8<Int?, String?, String?, String?, String?, String?, String?, Short?> {

    var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    var address: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    var zipCode: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    var phone: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    var city: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    var country: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    var sid: Short?
        set(value): Unit = set(7, value)
        get(): Short? = get(7) as Short?

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, String?, String?, String?, String?, String?, String?, Short?> = super.fieldsRow() as Row8<Int?, String?, String?, String?, String?, String?, String?, Short?>
    override fun valuesRow(): Row8<Int?, String?, String?, String?, String?, String?, String?, Short?> = super.valuesRow() as Row8<Int?, String?, String?, String?, String?, String?, String?, Short?>
    override fun field1(): Field<Int?> = StaffList.STAFF_LIST.ID
    override fun field2(): Field<String?> = StaffList.STAFF_LIST.NAME
    override fun field3(): Field<String?> = StaffList.STAFF_LIST.ADDRESS
    override fun field4(): Field<String?> = org.example.db.generated.tables.StaffList.STAFF_LIST.`ZIP CODE`
    override fun field5(): Field<String?> = StaffList.STAFF_LIST.PHONE
    override fun field6(): Field<String?> = StaffList.STAFF_LIST.CITY
    override fun field7(): Field<String?> = StaffList.STAFF_LIST.COUNTRY
    override fun field8(): Field<Short?> = StaffList.STAFF_LIST.SID
    override fun component1(): Int? = id
    override fun component2(): String? = name
    override fun component3(): String? = address
    override fun component4(): String? = zipCode
    override fun component5(): String? = phone
    override fun component6(): String? = city
    override fun component7(): String? = country
    override fun component8(): Short? = sid
    override fun value1(): Int? = id
    override fun value2(): String? = name
    override fun value3(): String? = address
    override fun value4(): String? = zipCode
    override fun value5(): String? = phone
    override fun value6(): String? = city
    override fun value7(): String? = country
    override fun value8(): Short? = sid

    override fun value1(value: Int?): StaffListRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): StaffListRecord {
        this.name = value
        return this
    }

    override fun value3(value: String?): StaffListRecord {
        this.address = value
        return this
    }

    override fun value4(value: String?): StaffListRecord {
        this.zipCode = value
        return this
    }

    override fun value5(value: String?): StaffListRecord {
        this.phone = value
        return this
    }

    override fun value6(value: String?): StaffListRecord {
        this.city = value
        return this
    }

    override fun value7(value: String?): StaffListRecord {
        this.country = value
        return this
    }

    override fun value8(value: Short?): StaffListRecord {
        this.sid = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: String?, value5: String?, value6: String?, value7: String?, value8: Short?): StaffListRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised StaffListRecord
     */
    constructor(id: Int? = null, name: String? = null, address: String? = null, zipCode: String? = null, phone: String? = null, city: String? = null, country: String? = null, sid: Short? = null): this() {
        this.id = id
        this.name = name
        this.address = address
        this.zipCode = zipCode
        this.phone = phone
        this.city = city
        this.country = country
        this.sid = sid
    }
}
