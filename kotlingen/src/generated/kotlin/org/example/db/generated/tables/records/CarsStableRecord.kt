/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables.records


import java.time.LocalDateTime
import java.time.LocalTime

import org.example.db.generated.tables.CarsStable
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CarsStableRecord() : UpdatableRecordImpl<CarsStableRecord>(CarsStable.CARS_STABLE), Record7<String?, Int?, String?, Int?, LocalDateTime?, LocalTime?, Double?> {

    var manufacturer: String?
        set(value): Unit = set(0, value)
        get(): String? = get(0) as String?

    var weight: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    var model: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    var id: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    var creationDate: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    var lastUsageTime: LocalTime?
        set(value): Unit = set(5, value)
        get(): LocalTime? = get(5) as LocalTime?

    var speed: Double?
        set(value): Unit = set(6, value)
        get(): Double? = get(6) as Double?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<String?, Int?, String?, Int?, LocalDateTime?, LocalTime?, Double?> = super.fieldsRow() as Row7<String?, Int?, String?, Int?, LocalDateTime?, LocalTime?, Double?>
    override fun valuesRow(): Row7<String?, Int?, String?, Int?, LocalDateTime?, LocalTime?, Double?> = super.valuesRow() as Row7<String?, Int?, String?, Int?, LocalDateTime?, LocalTime?, Double?>
    override fun field1(): Field<String?> = CarsStable.CARS_STABLE.MANUFACTURER
    override fun field2(): Field<Int?> = CarsStable.CARS_STABLE.WEIGHT
    override fun field3(): Field<String?> = CarsStable.CARS_STABLE.MODEL
    override fun field4(): Field<Int?> = CarsStable.CARS_STABLE.ID
    override fun field5(): Field<LocalDateTime?> = CarsStable.CARS_STABLE.CREATION_DATE
    override fun field6(): Field<LocalTime?> = CarsStable.CARS_STABLE.LAST_USAGE_TIME
    override fun field7(): Field<Double?> = CarsStable.CARS_STABLE.SPEED
    override fun component1(): String? = manufacturer
    override fun component2(): Int? = weight
    override fun component3(): String? = model
    override fun component4(): Int? = id
    override fun component5(): LocalDateTime? = creationDate
    override fun component6(): LocalTime? = lastUsageTime
    override fun component7(): Double? = speed
    override fun value1(): String? = manufacturer
    override fun value2(): Int? = weight
    override fun value3(): String? = model
    override fun value4(): Int? = id
    override fun value5(): LocalDateTime? = creationDate
    override fun value6(): LocalTime? = lastUsageTime
    override fun value7(): Double? = speed

    override fun value1(value: String?): CarsStableRecord {
        this.manufacturer = value
        return this
    }

    override fun value2(value: Int?): CarsStableRecord {
        this.weight = value
        return this
    }

    override fun value3(value: String?): CarsStableRecord {
        this.model = value
        return this
    }

    override fun value4(value: Int?): CarsStableRecord {
        this.id = value
        return this
    }

    override fun value5(value: LocalDateTime?): CarsStableRecord {
        this.creationDate = value
        return this
    }

    override fun value6(value: LocalTime?): CarsStableRecord {
        this.lastUsageTime = value
        return this
    }

    override fun value7(value: Double?): CarsStableRecord {
        this.speed = value
        return this
    }

    override fun values(value1: String?, value2: Int?, value3: String?, value4: Int?, value5: LocalDateTime?, value6: LocalTime?, value7: Double?): CarsStableRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised CarsStableRecord
     */
    constructor(manufacturer: String? = null, weight: Int? = null, model: String? = null, id: Int? = null, creationDate: LocalDateTime? = null, lastUsageTime: LocalTime? = null, speed: Double? = null): this() {
        this.manufacturer = manufacturer
        this.weight = weight
        this.model = model
        this.id = id
        this.creationDate = creationDate
        this.lastUsageTime = lastUsageTime
        this.speed = speed
    }
}
