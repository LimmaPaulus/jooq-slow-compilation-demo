/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables


import java.math.BigDecimal

import org.example.db.generated.Public
import org.example.db.generated.enums.MpaaRating
import org.example.db.generated.tables.records.FilmListRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FilmList(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, FilmListRecord>?,
    aliased: Table<FilmListRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<FilmListRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"film_list\" as  SELECT film.film_id AS fid,\n    film.title,\n    film.description,\n    category.name AS category,\n    film.rental_rate AS price,\n    film.length,\n    film.rating,\n    group_concat((((actor.first_name)::text || ' '::text) || (actor.last_name)::text)) AS actors\n   FROM ((((category\n     LEFT JOIN film_category ON ((category.category_id = film_category.category_id)))\n     LEFT JOIN film ON ((film_category.film_id = film.film_id)))\n     JOIN film_actor ON ((film.film_id = film_actor.film_id)))\n     JOIN actor ON ((film_actor.actor_id = actor.actor_id)))\n  GROUP BY film.film_id, film.title, film.description, category.name, film.rental_rate, film.length, film.rating;")
) {
    companion object {

        /**
         * The reference instance of <code>public.film_list</code>
         */
        val FILM_LIST: FilmList = FilmList()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<FilmListRecord> = FilmListRecord::class.java

    /**
     * The column <code>public.film_list.fid</code>.
     */
    val FID: TableField<FilmListRecord, Int?> = createField(DSL.name("fid"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.film_list.title</code>.
     */
    val TITLE: TableField<FilmListRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "")

    /**
     * The column <code>public.film_list.description</code>.
     */
    val DESCRIPTION: TableField<FilmListRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.film_list.category</code>.
     */
    val CATEGORY: TableField<FilmListRecord, String?> = createField(DSL.name("category"), SQLDataType.VARCHAR(25), this, "")

    /**
     * The column <code>public.film_list.price</code>.
     */
    val PRICE: TableField<FilmListRecord, BigDecimal?> = createField(DSL.name("price"), SQLDataType.NUMERIC(4, 2), this, "")

    /**
     * The column <code>public.film_list.length</code>.
     */
    val LENGTH: TableField<FilmListRecord, Short?> = createField(DSL.name("length"), SQLDataType.SMALLINT, this, "")

    /**
     * The column <code>public.film_list.rating</code>.
     */
    val RATING: TableField<FilmListRecord, MpaaRating?> = createField(DSL.name("rating"), SQLDataType.VARCHAR.asEnumDataType(org.example.db.generated.enums.MpaaRating::class.java), this, "")

    /**
     * The column <code>public.film_list.actors</code>.
     */
    val ACTORS: TableField<FilmListRecord, String?> = createField(DSL.name("actors"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<FilmListRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<FilmListRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.film_list</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.film_list</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.film_list</code> table reference
     */
    constructor(): this(DSL.name("film_list"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, FilmListRecord>): this(Internal.createPathAlias(child, key), child, key, FILM_LIST, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): FilmList = FilmList(DSL.name(alias), this)
    override fun `as`(alias: Name): FilmList = FilmList(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): FilmList = FilmList(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): FilmList = FilmList(name, null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Int?, String?, String?, String?, BigDecimal?, Short?, MpaaRating?, String?> = super.fieldsRow() as Row8<Int?, String?, String?, String?, BigDecimal?, Short?, MpaaRating?, String?>
}
