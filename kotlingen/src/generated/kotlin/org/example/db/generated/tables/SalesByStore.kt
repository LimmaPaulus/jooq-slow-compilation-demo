/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables


import java.math.BigDecimal

import org.example.db.generated.Public
import org.example.db.generated.tables.records.SalesByStoreRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SalesByStore(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SalesByStoreRecord>?,
    aliased: Table<SalesByStoreRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SalesByStoreRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"sales_by_store\" as  SELECT (((c.city)::text || ','::text) || (cy.country)::text) AS store,\n    (((m.first_name)::text || ' '::text) || (m.last_name)::text) AS manager,\n    sum(p.amount) AS total_sales\n   FROM (((((((payment p\n     JOIN rental r ON ((p.rental_id = r.rental_id)))\n     JOIN inventory i ON ((r.inventory_id = i.inventory_id)))\n     JOIN store s ON ((i.store_id = s.store_id)))\n     JOIN address a ON ((s.address_id = a.address_id)))\n     JOIN city c ON ((a.city_id = c.city_id)))\n     JOIN country cy ON ((c.country_id = cy.country_id)))\n     JOIN staff m ON ((s.manager_staff_id = m.staff_id)))\n  GROUP BY cy.country, c.city, s.store_id, m.first_name, m.last_name\n  ORDER BY cy.country, c.city;")
) {
    companion object {

        /**
         * The reference instance of <code>public.sales_by_store</code>
         */
        val SALES_BY_STORE: SalesByStore = SalesByStore()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SalesByStoreRecord> = SalesByStoreRecord::class.java

    /**
     * The column <code>public.sales_by_store.store</code>.
     */
    val STORE: TableField<SalesByStoreRecord, String?> = createField(DSL.name("store"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.sales_by_store.manager</code>.
     */
    val MANAGER: TableField<SalesByStoreRecord, String?> = createField(DSL.name("manager"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.sales_by_store.total_sales</code>.
     */
    val TOTAL_SALES: TableField<SalesByStoreRecord, BigDecimal?> = createField(DSL.name("total_sales"), SQLDataType.NUMERIC, this, "")

    private constructor(alias: Name, aliased: Table<SalesByStoreRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SalesByStoreRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.sales_by_store</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.sales_by_store</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.sales_by_store</code> table reference
     */
    constructor(): this(DSL.name("sales_by_store"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SalesByStoreRecord>): this(Internal.createPathAlias(child, key), child, key, SALES_BY_STORE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): SalesByStore = SalesByStore(DSL.name(alias), this)
    override fun `as`(alias: Name): SalesByStore = SalesByStore(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SalesByStore = SalesByStore(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SalesByStore = SalesByStore(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<String?, String?, BigDecimal?> = super.fieldsRow() as Row3<String?, String?, BigDecimal?>
}
