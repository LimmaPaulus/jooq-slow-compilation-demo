/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.routines.references


import java.math.BigDecimal
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.LocalTime

import org.example.db.generated.enums.MpaaRating
import org.example.db.generated.routines.GetCarModel
import org.example.db.generated.routines.GetCustomerBalance
import org.example.db.generated.routines.GroupConcat
import org.example.db.generated.routines.InventoryHeldByCustomer
import org.example.db.generated.routines.InventoryInStock
import org.example.db.generated.routines.LastDay
import org.example.db.generated.routines.PaymentFormSubmit
import org.example.db.generated.routines._GroupConcat
import org.example.db.generated.tables.FilmFormSubmit
import org.example.db.generated.tables.FilmInStock
import org.example.db.generated.tables.FilmNotInStock
import org.example.db.generated.tables.RewardsReport
import org.example.db.generated.tables.records.FilmFormSubmitRecord
import org.example.db.generated.tables.records.FilmInStockRecord
import org.example.db.generated.tables.records.FilmNotInStockRecord
import org.example.db.generated.tables.records.RewardsReportRecord
import org.jooq.AggregateFunction
import org.jooq.Configuration
import org.jooq.Field
import org.jooq.Result



/**
 * Call <code>public._group_concat</code>
 */
fun _GroupConcat(
      configuration: Configuration
    , __1: String?
    , __2: String?
): String? {
    val f = _GroupConcat()
    f.set__1(__1)
    f.set__2(__2)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public._group_concat</code> as a field.
 */
fun _GroupConcat(
      __1: String?
    , __2: String?
): Field<String?> {
    val f = _GroupConcat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Get <code>public._group_concat</code> as a field.
 */
fun _GroupConcat(
      __1: Field<String?>
    , __2: Field<String?>
): Field<String?> {
    val f = _GroupConcat()
    f.set__1(__1)
    f.set__2(__2)

    return f.asField()
}

/**
 * Call <code>public.get_car_model</code>
 */
fun getCarModel(
      configuration: Configuration
    , pCarId: Int?
): String? {
    val p = GetCarModel()
    p.setPCarId(pCarId)

    p.execute(configuration)
    return p.getPCarModel()
}

/**
 * Call <code>public.get_customer_balance</code>
 */
fun getCustomerBalance(
      configuration: Configuration
    , pCustomerId: Int?
    , pEffectiveDate: LocalDateTime?
): BigDecimal? {
    val f = GetCustomerBalance()
    f.setPCustomerId(pCustomerId)
    f.setPEffectiveDate(pEffectiveDate)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.get_customer_balance</code> as a field.
 */
fun getCustomerBalance(
      pCustomerId: Int?
    , pEffectiveDate: LocalDateTime?
): Field<BigDecimal?> {
    val f = GetCustomerBalance()
    f.setPCustomerId(pCustomerId)
    f.setPEffectiveDate(pEffectiveDate)

    return f.asField()
}

/**
 * Get <code>public.get_customer_balance</code> as a field.
 */
fun getCustomerBalance(
      pCustomerId: Field<Int?>
    , pEffectiveDate: Field<LocalDateTime?>
): Field<BigDecimal?> {
    val f = GetCustomerBalance()
    f.setPCustomerId(pCustomerId)
    f.setPEffectiveDate(pEffectiveDate)

    return f.asField()
}

/**
 * Get <code>public.group_concat</code> as a field.
 */
fun groupConcat(
      __1: String?
): AggregateFunction<String?> {
    val f = GroupConcat()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Get <code>public.group_concat</code> as a field.
 */
fun groupConcat(
      __1: Field<String?>
): AggregateFunction<String?> {
    val f = GroupConcat()
    f.set__1(__1)

    return f.asAggregateFunction()
}

/**
 * Call <code>public.inventory_held_by_customer</code>
 */
fun inventoryHeldByCustomer(
      configuration: Configuration
    , pInventoryId: Int?
): Int? {
    val f = InventoryHeldByCustomer()
    f.setPInventoryId(pInventoryId)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.inventory_held_by_customer</code> as a field.
 */
fun inventoryHeldByCustomer(
      pInventoryId: Int?
): Field<Int?> {
    val f = InventoryHeldByCustomer()
    f.setPInventoryId(pInventoryId)

    return f.asField()
}

/**
 * Get <code>public.inventory_held_by_customer</code> as a field.
 */
fun inventoryHeldByCustomer(
      pInventoryId: Field<Int?>
): Field<Int?> {
    val f = InventoryHeldByCustomer()
    f.setPInventoryId(pInventoryId)

    return f.asField()
}

/**
 * Call <code>public.inventory_in_stock</code>
 */
fun inventoryInStock(
      configuration: Configuration
    , pInventoryId: Int?
): Boolean? {
    val f = InventoryInStock()
    f.setPInventoryId(pInventoryId)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.inventory_in_stock</code> as a field.
 */
fun inventoryInStock(
      pInventoryId: Int?
): Field<Boolean?> {
    val f = InventoryInStock()
    f.setPInventoryId(pInventoryId)

    return f.asField()
}

/**
 * Get <code>public.inventory_in_stock</code> as a field.
 */
fun inventoryInStock(
      pInventoryId: Field<Int?>
): Field<Boolean?> {
    val f = InventoryInStock()
    f.setPInventoryId(pInventoryId)

    return f.asField()
}

/**
 * Call <code>public.last_day</code>
 */
fun lastDay(
      configuration: Configuration
    , __1: LocalDateTime?
): LocalDate? {
    val f = LastDay()
    f.set__1(__1)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.last_day</code> as a field.
 */
fun lastDay(
      __1: LocalDateTime?
): Field<LocalDate?> {
    val f = LastDay()
    f.set__1(__1)

    return f.asField()
}

/**
 * Get <code>public.last_day</code> as a field.
 */
fun lastDay(
      __1: Field<LocalDateTime?>
): Field<LocalDate?> {
    val f = LastDay()
    f.set__1(__1)

    return f.asField()
}

/**
 * Call <code>public.payment_form_submit</code>
 */
fun paymentFormSubmit(
      configuration: Configuration
    , pIsNewRow: String?
    , pId: Int?
    , pPaymentDate: LocalDateTime?
    , pPaymentTime: LocalTime?
): String? {
    val f = PaymentFormSubmit()
    f.setPIsNewRow(pIsNewRow)
    f.setPId(pId)
    f.setPPaymentDate(pPaymentDate)
    f.setPPaymentTime(pPaymentTime)

    f.execute(configuration)
    return f.returnValue
}

/**
 * Get <code>public.payment_form_submit</code> as a field.
 */
fun paymentFormSubmit(
      pIsNewRow: String?
    , pId: Int?
    , pPaymentDate: LocalDateTime?
    , pPaymentTime: LocalTime?
): Field<String?> {
    val f = PaymentFormSubmit()
    f.setPIsNewRow(pIsNewRow)
    f.setPId(pId)
    f.setPPaymentDate(pPaymentDate)
    f.setPPaymentTime(pPaymentTime)

    return f.asField()
}

/**
 * Get <code>public.payment_form_submit</code> as a field.
 */
fun paymentFormSubmit(
      pIsNewRow: Field<String?>
    , pId: Field<Int?>
    , pPaymentDate: Field<LocalDateTime?>
    , pPaymentTime: Field<LocalTime?>
): Field<String?> {
    val f = PaymentFormSubmit()
    f.setPIsNewRow(pIsNewRow)
    f.setPId(pId)
    f.setPPaymentDate(pPaymentDate)
    f.setPPaymentTime(pPaymentTime)

    return f.asField()
}

/**
 * Call <code>public.film_form_submit</code>.
 */
fun filmFormSubmit(
      configuration: Configuration
    , pIsNewRow: String?
    , pTitle: String?
    , pDescription: String?
    , pLanguageId: Int?
    , pReleaseYear: Int?
    , pRating: MpaaRating?
    , pRentalRate: Double?
    , pId: Int?
): Result<FilmFormSubmitRecord> = configuration.dsl().selectFrom(org.example.db.generated.tables.FilmFormSubmit.FILM_FORM_SUBMIT.call(
      pIsNewRow
    , pTitle
    , pDescription
    , pLanguageId
    , pReleaseYear
    , pRating
    , pRentalRate
    , pId
)).fetch()

/**
 * Get <code>public.film_form_submit</code> as a table.
 */
fun filmFormSubmit(
      pIsNewRow: String?
    , pTitle: String?
    , pDescription: String?
    , pLanguageId: Int?
    , pReleaseYear: Int?
    , pRating: MpaaRating?
    , pRentalRate: Double?
    , pId: Int?
): FilmFormSubmit = org.example.db.generated.tables.FilmFormSubmit.FILM_FORM_SUBMIT.call(
    pIsNewRow,
    pTitle,
    pDescription,
    pLanguageId,
    pReleaseYear,
    pRating,
    pRentalRate,
    pId
)

/**
 * Get <code>public.film_form_submit</code> as a table.
 */
fun filmFormSubmit(
      pIsNewRow: Field<String?>
    , pTitle: Field<String?>
    , pDescription: Field<String?>
    , pLanguageId: Field<Int?>
    , pReleaseYear: Field<Int?>
    , pRating: Field<MpaaRating?>
    , pRentalRate: Field<Double?>
    , pId: Field<Int?>
): FilmFormSubmit = org.example.db.generated.tables.FilmFormSubmit.FILM_FORM_SUBMIT.call(
    pIsNewRow,
    pTitle,
    pDescription,
    pLanguageId,
    pReleaseYear,
    pRating,
    pRentalRate,
    pId
)

/**
 * Call <code>public.film_in_stock</code>.
 */
fun filmInStock(
      configuration: Configuration
    , pFilmId: Int?
    , pStoreId: Int?
): Result<FilmInStockRecord> = configuration.dsl().selectFrom(org.example.db.generated.tables.FilmInStock.FILM_IN_STOCK.call(
      pFilmId
    , pStoreId
)).fetch()

/**
 * Get <code>public.film_in_stock</code> as a table.
 */
fun filmInStock(
      pFilmId: Int?
    , pStoreId: Int?
): FilmInStock = org.example.db.generated.tables.FilmInStock.FILM_IN_STOCK.call(
    pFilmId,
    pStoreId
)

/**
 * Get <code>public.film_in_stock</code> as a table.
 */
fun filmInStock(
      pFilmId: Field<Int?>
    , pStoreId: Field<Int?>
): FilmInStock = org.example.db.generated.tables.FilmInStock.FILM_IN_STOCK.call(
    pFilmId,
    pStoreId
)

/**
 * Call <code>public.film_not_in_stock</code>.
 */
fun filmNotInStock(
      configuration: Configuration
    , pFilmId: Int?
    , pStoreId: Int?
): Result<FilmNotInStockRecord> = configuration.dsl().selectFrom(org.example.db.generated.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
      pFilmId
    , pStoreId
)).fetch()

/**
 * Get <code>public.film_not_in_stock</code> as a table.
 */
fun filmNotInStock(
      pFilmId: Int?
    , pStoreId: Int?
): FilmNotInStock = org.example.db.generated.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
    pFilmId,
    pStoreId
)

/**
 * Get <code>public.film_not_in_stock</code> as a table.
 */
fun filmNotInStock(
      pFilmId: Field<Int?>
    , pStoreId: Field<Int?>
): FilmNotInStock = org.example.db.generated.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
    pFilmId,
    pStoreId
)

/**
 * Call <code>public.rewards_report</code>.
 */
fun rewardsReport(
      configuration: Configuration
    , minMonthlyPurchases: Int?
    , minDollarAmountPurchased: BigDecimal?
): Result<RewardsReportRecord> = configuration.dsl().selectFrom(org.example.db.generated.tables.RewardsReport.REWARDS_REPORT.call(
      minMonthlyPurchases
    , minDollarAmountPurchased
)).fetch()

/**
 * Get <code>public.rewards_report</code> as a table.
 */
fun rewardsReport(
      minMonthlyPurchases: Int?
    , minDollarAmountPurchased: BigDecimal?
): RewardsReport = org.example.db.generated.tables.RewardsReport.REWARDS_REPORT.call(
    minMonthlyPurchases,
    minDollarAmountPurchased
)

/**
 * Get <code>public.rewards_report</code> as a table.
 */
fun rewardsReport(
      minMonthlyPurchases: Field<Int?>
    , minDollarAmountPurchased: Field<BigDecimal?>
): RewardsReport = org.example.db.generated.tables.RewardsReport.REWARDS_REPORT.call(
    minMonthlyPurchases,
    minDollarAmountPurchased
)
