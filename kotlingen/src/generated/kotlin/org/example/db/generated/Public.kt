/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated


import java.math.BigDecimal

import kotlin.collections.List

import org.example.db.generated.domains.YEAR
import org.example.db.generated.enums.MpaaRating
import org.example.db.generated.tables.Actor
import org.example.db.generated.tables.ActorInfo
import org.example.db.generated.tables.Address
import org.example.db.generated.tables.Cars
import org.example.db.generated.tables.CarsStable
import org.example.db.generated.tables.Category
import org.example.db.generated.tables.City
import org.example.db.generated.tables.Country
import org.example.db.generated.tables.Customer
import org.example.db.generated.tables.CustomerList
import org.example.db.generated.tables.Film
import org.example.db.generated.tables.FilmActor
import org.example.db.generated.tables.FilmCategory
import org.example.db.generated.tables.FilmFormSubmit
import org.example.db.generated.tables.FilmInStock
import org.example.db.generated.tables.FilmList
import org.example.db.generated.tables.FilmNotInStock
import org.example.db.generated.tables.Inventory
import org.example.db.generated.tables.Language
import org.example.db.generated.tables.NicerButSlowerFilmList
import org.example.db.generated.tables.Payment
import org.example.db.generated.tables.Rental
import org.example.db.generated.tables.RewardsReport
import org.example.db.generated.tables.SalesByFilmCategory
import org.example.db.generated.tables.SalesByStore
import org.example.db.generated.tables.Staff
import org.example.db.generated.tables.StaffList
import org.example.db.generated.tables.Store
import org.example.db.generated.tables.records.FilmFormSubmitRecord
import org.example.db.generated.tables.records.FilmInStockRecord
import org.example.db.generated.tables.records.FilmNotInStockRecord
import org.example.db.generated.tables.records.RewardsReportRecord
import org.jooq.Catalog
import org.jooq.Configuration
import org.jooq.Domain
import org.jooq.Field
import org.jooq.Result
import org.jooq.Table
import org.jooq.impl.SchemaImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Public : SchemaImpl("public", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>public</code>
         */
        val PUBLIC: Public = Public()
    }

    /**
     * The table <code>public.actor</code>.
     */
    val ACTOR: Actor get() = Actor.ACTOR

    /**
     * The table <code>public.actor_info</code>.
     */
    val ACTOR_INFO: ActorInfo get() = ActorInfo.ACTOR_INFO

    /**
     * The table <code>public.address</code>.
     */
    val ADDRESS: Address get() = Address.ADDRESS

    /**
     * The table <code>public.cars</code>.
     */
    val CARS: Cars get() = Cars.CARS

    /**
     * The table <code>public.cars_stable</code>.
     */
    val CARS_STABLE: CarsStable get() = CarsStable.CARS_STABLE

    /**
     * The table <code>public.category</code>.
     */
    val CATEGORY: Category get() = Category.CATEGORY

    /**
     * The table <code>public.city</code>.
     */
    val CITY: City get() = City.CITY

    /**
     * The table <code>public.country</code>.
     */
    val COUNTRY: Country get() = Country.COUNTRY

    /**
     * The table <code>public.customer</code>.
     */
    val CUSTOMER: Customer get() = Customer.CUSTOMER

    /**
     * The table <code>public.customer_list</code>.
     */
    val CUSTOMER_LIST: CustomerList get() = CustomerList.CUSTOMER_LIST

    /**
     * The table <code>public.film</code>.
     */
    val FILM: Film get() = Film.FILM

    /**
     * The table <code>public.film_actor</code>.
     */
    val FILM_ACTOR: FilmActor get() = FilmActor.FILM_ACTOR

    /**
     * The table <code>public.film_category</code>.
     */
    val FILM_CATEGORY: FilmCategory get() = FilmCategory.FILM_CATEGORY

    /**
     * The table <code>public.film_form_submit</code>.
     */
    val FILM_FORM_SUBMIT: FilmFormSubmit get() = FilmFormSubmit.FILM_FORM_SUBMIT

    /**
     * Call <code>public.film_form_submit</code>.
     */
    fun FILM_FORM_SUBMIT(
          configuration: Configuration
        , pIsNewRow: String?
        , pTitle: String?
        , pDescription: String?
        , pLanguageId: Int?
        , pReleaseYear: Int?
        , pRating: MpaaRating?
        , pRentalRate: Double?
        , pId: Int?
    ): Result<FilmFormSubmitRecord> = configuration.dsl().selectFrom(org.example.db.generated.tables.FilmFormSubmit.FILM_FORM_SUBMIT.call(
          pIsNewRow
        , pTitle
        , pDescription
        , pLanguageId
        , pReleaseYear
        , pRating
        , pRentalRate
        , pId
    )).fetch()

    /**
     * Get <code>public.film_form_submit</code> as a table.
     */
    fun FILM_FORM_SUBMIT(
          pIsNewRow: String?
        , pTitle: String?
        , pDescription: String?
        , pLanguageId: Int?
        , pReleaseYear: Int?
        , pRating: MpaaRating?
        , pRentalRate: Double?
        , pId: Int?
    ): FilmFormSubmit = org.example.db.generated.tables.FilmFormSubmit.FILM_FORM_SUBMIT.call(
        pIsNewRow,
        pTitle,
        pDescription,
        pLanguageId,
        pReleaseYear,
        pRating,
        pRentalRate,
        pId
    )

    /**
     * Get <code>public.film_form_submit</code> as a table.
     */
    fun FILM_FORM_SUBMIT(
          pIsNewRow: Field<String?>
        , pTitle: Field<String?>
        , pDescription: Field<String?>
        , pLanguageId: Field<Int?>
        , pReleaseYear: Field<Int?>
        , pRating: Field<MpaaRating?>
        , pRentalRate: Field<Double?>
        , pId: Field<Int?>
    ): FilmFormSubmit = org.example.db.generated.tables.FilmFormSubmit.FILM_FORM_SUBMIT.call(
        pIsNewRow,
        pTitle,
        pDescription,
        pLanguageId,
        pReleaseYear,
        pRating,
        pRentalRate,
        pId
    )

    /**
     * The table <code>public.film_in_stock</code>.
     */
    val FILM_IN_STOCK: FilmInStock get() = FilmInStock.FILM_IN_STOCK

    /**
     * Call <code>public.film_in_stock</code>.
     */
    fun FILM_IN_STOCK(
          configuration: Configuration
        , pFilmId: Int?
        , pStoreId: Int?
    ): Result<FilmInStockRecord> = configuration.dsl().selectFrom(org.example.db.generated.tables.FilmInStock.FILM_IN_STOCK.call(
          pFilmId
        , pStoreId
    )).fetch()

    /**
     * Get <code>public.film_in_stock</code> as a table.
     */
    fun FILM_IN_STOCK(
          pFilmId: Int?
        , pStoreId: Int?
    ): FilmInStock = org.example.db.generated.tables.FilmInStock.FILM_IN_STOCK.call(
        pFilmId,
        pStoreId
    )

    /**
     * Get <code>public.film_in_stock</code> as a table.
     */
    fun FILM_IN_STOCK(
          pFilmId: Field<Int?>
        , pStoreId: Field<Int?>
    ): FilmInStock = org.example.db.generated.tables.FilmInStock.FILM_IN_STOCK.call(
        pFilmId,
        pStoreId
    )

    /**
     * The table <code>public.film_list</code>.
     */
    val FILM_LIST: FilmList get() = FilmList.FILM_LIST

    /**
     * The table <code>public.film_not_in_stock</code>.
     */
    val FILM_NOT_IN_STOCK: FilmNotInStock get() = FilmNotInStock.FILM_NOT_IN_STOCK

    /**
     * Call <code>public.film_not_in_stock</code>.
     */
    fun FILM_NOT_IN_STOCK(
          configuration: Configuration
        , pFilmId: Int?
        , pStoreId: Int?
    ): Result<FilmNotInStockRecord> = configuration.dsl().selectFrom(org.example.db.generated.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
          pFilmId
        , pStoreId
    )).fetch()

    /**
     * Get <code>public.film_not_in_stock</code> as a table.
     */
    fun FILM_NOT_IN_STOCK(
          pFilmId: Int?
        , pStoreId: Int?
    ): FilmNotInStock = org.example.db.generated.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
        pFilmId,
        pStoreId
    )

    /**
     * Get <code>public.film_not_in_stock</code> as a table.
     */
    fun FILM_NOT_IN_STOCK(
          pFilmId: Field<Int?>
        , pStoreId: Field<Int?>
    ): FilmNotInStock = org.example.db.generated.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
        pFilmId,
        pStoreId
    )

    /**
     * The table <code>public.inventory</code>.
     */
    val INVENTORY: Inventory get() = Inventory.INVENTORY

    /**
     * The table <code>public.language</code>.
     */
    val LANGUAGE: Language get() = Language.LANGUAGE

    /**
     * The table <code>public.nicer_but_slower_film_list</code>.
     */
    val NICER_BUT_SLOWER_FILM_LIST: NicerButSlowerFilmList get() = NicerButSlowerFilmList.NICER_BUT_SLOWER_FILM_LIST

    /**
     * The table <code>public.payment</code>.
     */
    val PAYMENT: Payment get() = Payment.PAYMENT

    /**
     * The table <code>public.rental</code>.
     */
    val RENTAL: Rental get() = Rental.RENTAL

    /**
     * The table <code>public.rewards_report</code>.
     */
    val REWARDS_REPORT: RewardsReport get() = RewardsReport.REWARDS_REPORT

    /**
     * Call <code>public.rewards_report</code>.
     */
    fun REWARDS_REPORT(
          configuration: Configuration
        , minMonthlyPurchases: Int?
        , minDollarAmountPurchased: BigDecimal?
    ): Result<RewardsReportRecord> = configuration.dsl().selectFrom(org.example.db.generated.tables.RewardsReport.REWARDS_REPORT.call(
          minMonthlyPurchases
        , minDollarAmountPurchased
    )).fetch()

    /**
     * Get <code>public.rewards_report</code> as a table.
     */
    fun REWARDS_REPORT(
          minMonthlyPurchases: Int?
        , minDollarAmountPurchased: BigDecimal?
    ): RewardsReport = org.example.db.generated.tables.RewardsReport.REWARDS_REPORT.call(
        minMonthlyPurchases,
        minDollarAmountPurchased
    )

    /**
     * Get <code>public.rewards_report</code> as a table.
     */
    fun REWARDS_REPORT(
          minMonthlyPurchases: Field<Int?>
        , minDollarAmountPurchased: Field<BigDecimal?>
    ): RewardsReport = org.example.db.generated.tables.RewardsReport.REWARDS_REPORT.call(
        minMonthlyPurchases,
        minDollarAmountPurchased
    )

    /**
     * The table <code>public.sales_by_film_category</code>.
     */
    val SALES_BY_FILM_CATEGORY: SalesByFilmCategory get() = SalesByFilmCategory.SALES_BY_FILM_CATEGORY

    /**
     * The table <code>public.sales_by_store</code>.
     */
    val SALES_BY_STORE: SalesByStore get() = SalesByStore.SALES_BY_STORE

    /**
     * The table <code>public.staff</code>.
     */
    val STAFF: Staff get() = Staff.STAFF

    /**
     * The table <code>public.staff_list</code>.
     */
    val STAFF_LIST: StaffList get() = StaffList.STAFF_LIST

    /**
     * The table <code>public.store</code>.
     */
    val STORE: Store get() = Store.STORE

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getDomains(): List<Domain<*>> = listOf(
        YEAR
    )

    override fun getTables(): List<Table<*>> = listOf(
        Actor.ACTOR,
        ActorInfo.ACTOR_INFO,
        Address.ADDRESS,
        Cars.CARS,
        CarsStable.CARS_STABLE,
        Category.CATEGORY,
        City.CITY,
        Country.COUNTRY,
        Customer.CUSTOMER,
        CustomerList.CUSTOMER_LIST,
        Film.FILM,
        FilmActor.FILM_ACTOR,
        FilmCategory.FILM_CATEGORY,
        FilmFormSubmit.FILM_FORM_SUBMIT,
        FilmInStock.FILM_IN_STOCK,
        FilmList.FILM_LIST,
        FilmNotInStock.FILM_NOT_IN_STOCK,
        Inventory.INVENTORY,
        Language.LANGUAGE,
        NicerButSlowerFilmList.NICER_BUT_SLOWER_FILM_LIST,
        Payment.PAYMENT,
        Rental.RENTAL,
        RewardsReport.REWARDS_REPORT,
        SalesByFilmCategory.SALES_BY_FILM_CATEGORY,
        SalesByStore.SALES_BY_STORE,
        Staff.STAFF,
        StaffList.STAFF_LIST,
        Store.STORE
    )
}
