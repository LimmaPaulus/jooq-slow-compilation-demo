/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables


import java.time.LocalDateTime

import org.example.db.generated.Public
import org.example.db.generated.keys.CATEGORY_PKEY
import org.example.db.generated.tables.records.CategoryRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Category(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CategoryRecord>?,
    aliased: Table<CategoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CategoryRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.category</code>
         */
        val CATEGORY: Category = Category()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CategoryRecord> = CategoryRecord::class.java

    /**
     * The column <code>public.category.category_id</code>.
     */
    val CATEGORY_ID: TableField<CategoryRecord, Int?> = createField(DSL.name("category_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.category.name</code>.
     */
    val NAME: TableField<CategoryRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(25).nullable(false), this, "")

    /**
     * The column <code>public.category.last_update</code>.
     */
    val LAST_UPDATE: TableField<CategoryRecord, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<CategoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CategoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.category</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.category</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.category</code> table reference
     */
    constructor(): this(DSL.name("category"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CategoryRecord>): this(Internal.createPathAlias(child, key), child, key, CATEGORY, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<CategoryRecord, Int?> = super.getIdentity() as Identity<CategoryRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<CategoryRecord> = CATEGORY_PKEY
    override fun `as`(alias: String): Category = Category(DSL.name(alias), this)
    override fun `as`(alias: Name): Category = Category(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Category = Category(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Category = Category(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, String?, LocalDateTime?> = super.fieldsRow() as Row3<Int?, String?, LocalDateTime?>
}
