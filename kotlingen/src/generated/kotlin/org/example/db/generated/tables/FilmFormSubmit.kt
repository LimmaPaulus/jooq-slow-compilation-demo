/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables


import org.example.db.generated.Public
import org.example.db.generated.enums.MpaaRating
import org.example.db.generated.tables.records.FilmFormSubmitRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FilmFormSubmit(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, FilmFormSubmitRecord>?,
    aliased: Table<FilmFormSubmitRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<FilmFormSubmitRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.function()
) {
    companion object {

        /**
         * The reference instance of <code>public.film_form_submit</code>
         */
        val FILM_FORM_SUBMIT: FilmFormSubmit = FilmFormSubmit()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<FilmFormSubmitRecord> = FilmFormSubmitRecord::class.java

    /**
     * The column <code>public.film_form_submit.film_id</code>.
     */
    val FILM_ID: TableField<FilmFormSubmitRecord, Int?> = createField(DSL.name("film_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.film_form_submit.__MESSAGE_TITLE__</code>.
     */
    val __MESSAGE_TITLE__: TableField<FilmFormSubmitRecord, String?> = createField(DSL.name("__MESSAGE_TITLE__"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.film_form_submit.__MESSAGE_CONTENT__</code>.
     */
    val __MESSAGE_CONTENT__: TableField<FilmFormSubmitRecord, String?> = createField(DSL.name("__MESSAGE_CONTENT__"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<FilmFormSubmitRecord>?): this(alias, null, null, aliased, arrayOf(
        DSL.value(null, SQLDataType.CLOB),
        DSL.value(null, SQLDataType.CLOB),
        DSL.value(null, SQLDataType.CLOB),
        DSL.value(null, SQLDataType.INTEGER),
        DSL.value(null, SQLDataType.INTEGER),
        DSL.value(null, SQLDataType.VARCHAR.asEnumDataType(org.example.db.generated.enums.MpaaRating::class.java)),
        DSL.value(null, SQLDataType.DOUBLE),
        DSL.value(null, SQLDataType.INTEGER)
    ))
    private constructor(alias: Name, aliased: Table<FilmFormSubmitRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.film_form_submit</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.film_form_submit</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.film_form_submit</code> table reference
     */
    constructor(): this(DSL.name("film_form_submit"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): FilmFormSubmit = FilmFormSubmit(DSL.name(alias), this, parameters)
    override fun `as`(alias: Name): FilmFormSubmit = FilmFormSubmit(alias, this, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: String): FilmFormSubmit = FilmFormSubmit(DSL.name(name), null, parameters)

    /**
     * Rename this table
     */
    override fun rename(name: Name): FilmFormSubmit = FilmFormSubmit(name, null, parameters)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, String?, String?> = super.fieldsRow() as Row3<Int?, String?, String?>

    /**
     * Call this table-valued function
     */
    fun call(
          pIsNewRow: String?
        , pTitle: String?
        , pDescription: String?
        , pLanguageId: Int?
        , pReleaseYear: Int?
        , pRating: MpaaRating?
        , pRentalRate: Double?
        , pId: Int?
    ): FilmFormSubmit = FilmFormSubmit(DSL.name("film_form_submit"), null, arrayOf(
        DSL.value(pIsNewRow, SQLDataType.CLOB),
        DSL.value(pTitle, SQLDataType.CLOB),
        DSL.value(pDescription, SQLDataType.CLOB),
        DSL.value(pLanguageId, SQLDataType.INTEGER),
        DSL.value(pReleaseYear, SQLDataType.INTEGER),
        DSL.value(pRating, SQLDataType.VARCHAR.asEnumDataType(org.example.db.generated.enums.MpaaRating::class.java)),
        DSL.value(pRentalRate, SQLDataType.DOUBLE),
        DSL.value(pId, SQLDataType.INTEGER)
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }

    /**
     * Call this table-valued function
     */
    fun call(
          pIsNewRow: Field<String?>
        , pTitle: Field<String?>
        , pDescription: Field<String?>
        , pLanguageId: Field<Int?>
        , pReleaseYear: Field<Int?>
        , pRating: Field<MpaaRating?>
        , pRentalRate: Field<Double?>
        , pId: Field<Int?>
    ): FilmFormSubmit = FilmFormSubmit(DSL.name("film_form_submit"), null, arrayOf(
        pIsNewRow,
        pTitle,
        pDescription,
        pLanguageId,
        pReleaseYear,
        pRating,
        pRentalRate,
        pId
    )).let { if (aliased()) it.`as`(unqualifiedName) else it }
}
