/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables


import org.example.db.generated.Public
import org.example.db.generated.tables.records.ActorInfoRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row4
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ActorInfo(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ActorInfoRecord>?,
    aliased: Table<ActorInfoRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ActorInfoRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"actor_info\" as  SELECT a.actor_id,\n    a.first_name,\n    a.last_name,\n    group_concat(DISTINCT (((c.name)::text || ': '::text) || ( SELECT group_concat((f.title)::text) AS group_concat\n           FROM ((film f\n             JOIN film_category fc_1 ON ((f.film_id = fc_1.film_id)))\n             JOIN film_actor fa_1 ON ((f.film_id = fa_1.film_id)))\n          WHERE ((fc_1.category_id = c.category_id) AND (fa_1.actor_id = a.actor_id))\n          GROUP BY fa_1.actor_id))) AS film_info\n   FROM (((actor a\n     LEFT JOIN film_actor fa ON ((a.actor_id = fa.actor_id)))\n     LEFT JOIN film_category fc ON ((fa.film_id = fc.film_id)))\n     LEFT JOIN category c ON ((fc.category_id = c.category_id)))\n  GROUP BY a.actor_id, a.first_name, a.last_name;")
) {
    companion object {

        /**
         * The reference instance of <code>public.actor_info</code>
         */
        val ACTOR_INFO: ActorInfo = ActorInfo()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ActorInfoRecord> = ActorInfoRecord::class.java

    /**
     * The column <code>public.actor_info.actor_id</code>.
     */
    val ACTOR_ID: TableField<ActorInfoRecord, Int?> = createField(DSL.name("actor_id"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.actor_info.first_name</code>.
     */
    val FIRST_NAME: TableField<ActorInfoRecord, String?> = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45), this, "")

    /**
     * The column <code>public.actor_info.last_name</code>.
     */
    val LAST_NAME: TableField<ActorInfoRecord, String?> = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45), this, "")

    /**
     * The column <code>public.actor_info.film_info</code>.
     */
    val FILM_INFO: TableField<ActorInfoRecord, String?> = createField(DSL.name("film_info"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<ActorInfoRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ActorInfoRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.actor_info</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.actor_info</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.actor_info</code> table reference
     */
    constructor(): this(DSL.name("actor_info"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ActorInfoRecord>): this(Internal.createPathAlias(child, key), child, key, ACTOR_INFO, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): ActorInfo = ActorInfo(DSL.name(alias), this)
    override fun `as`(alias: Name): ActorInfo = ActorInfo(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ActorInfo = ActorInfo(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ActorInfo = ActorInfo(name, null)

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row4<Int?, String?, String?, String?> = super.fieldsRow() as Row4<Int?, String?, String?, String?>
}
