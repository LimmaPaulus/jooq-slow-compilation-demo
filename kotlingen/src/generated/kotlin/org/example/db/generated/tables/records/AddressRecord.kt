/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables.records


import java.time.LocalDateTime

import org.example.db.generated.tables.Address
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AddressRecord() : UpdatableRecordImpl<AddressRecord>(Address.ADDRESS), Record8<Int?, String?, String?, String?, Short?, String?, String?, LocalDateTime?> {

    var addressId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    var address: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    var address2: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    var district: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    var cityId: Short?
        set(value): Unit = set(4, value)
        get(): Short? = get(4) as Short?

    var postalCode: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    var phone: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    var lastUpdate: LocalDateTime?
        set(value): Unit = set(7, value)
        get(): LocalDateTime? = get(7) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Int?, String?, String?, String?, Short?, String?, String?, LocalDateTime?> = super.fieldsRow() as Row8<Int?, String?, String?, String?, Short?, String?, String?, LocalDateTime?>
    override fun valuesRow(): Row8<Int?, String?, String?, String?, Short?, String?, String?, LocalDateTime?> = super.valuesRow() as Row8<Int?, String?, String?, String?, Short?, String?, String?, LocalDateTime?>
    override fun field1(): Field<Int?> = Address.ADDRESS.ADDRESS_ID
    override fun field2(): Field<String?> = Address.ADDRESS.ADDRESS_
    override fun field3(): Field<String?> = Address.ADDRESS.ADDRESS2
    override fun field4(): Field<String?> = Address.ADDRESS.DISTRICT
    override fun field5(): Field<Short?> = Address.ADDRESS.CITY_ID
    override fun field6(): Field<String?> = Address.ADDRESS.POSTAL_CODE
    override fun field7(): Field<String?> = Address.ADDRESS.PHONE
    override fun field8(): Field<LocalDateTime?> = Address.ADDRESS.LAST_UPDATE
    override fun component1(): Int? = addressId
    override fun component2(): String? = address
    override fun component3(): String? = address2
    override fun component4(): String? = district
    override fun component5(): Short? = cityId
    override fun component6(): String? = postalCode
    override fun component7(): String? = phone
    override fun component8(): LocalDateTime? = lastUpdate
    override fun value1(): Int? = addressId
    override fun value2(): String? = address
    override fun value3(): String? = address2
    override fun value4(): String? = district
    override fun value5(): Short? = cityId
    override fun value6(): String? = postalCode
    override fun value7(): String? = phone
    override fun value8(): LocalDateTime? = lastUpdate

    override fun value1(value: Int?): AddressRecord {
        this.addressId = value
        return this
    }

    override fun value2(value: String?): AddressRecord {
        this.address = value
        return this
    }

    override fun value3(value: String?): AddressRecord {
        this.address2 = value
        return this
    }

    override fun value4(value: String?): AddressRecord {
        this.district = value
        return this
    }

    override fun value5(value: Short?): AddressRecord {
        this.cityId = value
        return this
    }

    override fun value6(value: String?): AddressRecord {
        this.postalCode = value
        return this
    }

    override fun value7(value: String?): AddressRecord {
        this.phone = value
        return this
    }

    override fun value8(value: LocalDateTime?): AddressRecord {
        this.lastUpdate = value
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: String?, value4: String?, value5: Short?, value6: String?, value7: String?, value8: LocalDateTime?): AddressRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised AddressRecord
     */
    constructor(addressId: Int? = null, address: String? = null, address2: String? = null, district: String? = null, cityId: Short? = null, postalCode: String? = null, phone: String? = null, lastUpdate: LocalDateTime? = null): this() {
        this.addressId = addressId
        this.address = address
        this.address2 = address2
        this.district = district
        this.cityId = cityId
        this.postalCode = postalCode
        this.phone = phone
        this.lastUpdate = lastUpdate
    }
}
