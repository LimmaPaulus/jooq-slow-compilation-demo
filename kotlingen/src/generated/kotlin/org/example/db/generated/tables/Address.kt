/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables


import java.time.LocalDateTime

import kotlin.collections.List

import org.example.db.generated.Public
import org.example.db.generated.indexes.IDX_FK_CITY_ID
import org.example.db.generated.keys.ADDRESS_PKEY
import org.example.db.generated.keys.ADDRESS__FK_ADDRESS_CITY
import org.example.db.generated.tables.records.AddressRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Address(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AddressRecord>?,
    aliased: Table<AddressRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AddressRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.address</code>
         */
        val ADDRESS: Address = Address()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AddressRecord> = AddressRecord::class.java

    /**
     * The column <code>public.address.address_id</code>.
     */
    val ADDRESS_ID: TableField<AddressRecord, Int?> = createField(DSL.name("address_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.address.address</code>.
     */
    val ADDRESS_: TableField<AddressRecord, String?> = createField(DSL.name("address"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>public.address.address2</code>.
     */
    val ADDRESS2: TableField<AddressRecord, String?> = createField(DSL.name("address2"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.address.district</code>.
     */
    val DISTRICT: TableField<AddressRecord, String?> = createField(DSL.name("district"), SQLDataType.VARCHAR(20).nullable(false), this, "")

    /**
     * The column <code>public.address.city_id</code>.
     */
    val CITY_ID: TableField<AddressRecord, Short?> = createField(DSL.name("city_id"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>public.address.postal_code</code>.
     */
    val POSTAL_CODE: TableField<AddressRecord, String?> = createField(DSL.name("postal_code"), SQLDataType.VARCHAR(10), this, "")

    /**
     * The column <code>public.address.phone</code>.
     */
    val PHONE: TableField<AddressRecord, String?> = createField(DSL.name("phone"), SQLDataType.VARCHAR(20).nullable(false), this, "")

    /**
     * The column <code>public.address.last_update</code>.
     */
    val LAST_UPDATE: TableField<AddressRecord, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<AddressRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AddressRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.address</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.address</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.address</code> table reference
     */
    constructor(): this(DSL.name("address"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AddressRecord>): this(Internal.createPathAlias(child, key), child, key, ADDRESS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_FK_CITY_ID)
    override fun getIdentity(): Identity<AddressRecord, Int?> = super.getIdentity() as Identity<AddressRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<AddressRecord> = ADDRESS_PKEY
    override fun getReferences(): List<ForeignKey<AddressRecord, *>> = listOf(ADDRESS__FK_ADDRESS_CITY)

    private lateinit var _city: City

    /**
     * Get the implicit join path to the <code>public.city</code> table.
     */
    fun city(): City {
        if (!this::_city.isInitialized)
            _city = City(this, ADDRESS__FK_ADDRESS_CITY)

        return _city;
    }
    override fun `as`(alias: String): Address = Address(DSL.name(alias), this)
    override fun `as`(alias: Name): Address = Address(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Address = Address(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Address = Address(name, null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Int?, String?, String?, String?, Short?, String?, String?, LocalDateTime?> = super.fieldsRow() as Row8<Int?, String?, String?, String?, Short?, String?, String?, LocalDateTime?>
}
