/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables


import java.time.LocalDateTime

import kotlin.collections.List

import org.example.db.generated.Public
import org.example.db.generated.keys.STAFF_PKEY
import org.example.db.generated.keys.STAFF__STAFF_ADDRESS_ID_FKEY
import org.example.db.generated.tables.records.StaffRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row11
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Staff(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, StaffRecord>?,
    aliased: Table<StaffRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<StaffRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.staff</code>
         */
        val STAFF: Staff = Staff()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<StaffRecord> = StaffRecord::class.java

    /**
     * The column <code>public.staff.staff_id</code>.
     */
    val STAFF_ID: TableField<StaffRecord, Int?> = createField(DSL.name("staff_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.staff.first_name</code>.
     */
    val FIRST_NAME: TableField<StaffRecord, String?> = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45).nullable(false), this, "")

    /**
     * The column <code>public.staff.last_name</code>.
     */
    val LAST_NAME: TableField<StaffRecord, String?> = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45).nullable(false), this, "")

    /**
     * The column <code>public.staff.address_id</code>.
     */
    val ADDRESS_ID: TableField<StaffRecord, Short?> = createField(DSL.name("address_id"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>public.staff.email</code>.
     */
    val EMAIL: TableField<StaffRecord, String?> = createField(DSL.name("email"), SQLDataType.VARCHAR(50), this, "")

    /**
     * The column <code>public.staff.store_id</code>.
     */
    val STORE_ID: TableField<StaffRecord, Short?> = createField(DSL.name("store_id"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>public.staff.active</code>.
     */
    val ACTIVE: TableField<StaffRecord, Boolean?> = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>public.staff.username</code>.
     */
    val USERNAME: TableField<StaffRecord, String?> = createField(DSL.name("username"), SQLDataType.VARCHAR(16).nullable(false), this, "")

    /**
     * The column <code>public.staff.password</code>.
     */
    val PASSWORD: TableField<StaffRecord, String?> = createField(DSL.name("password"), SQLDataType.VARCHAR(40), this, "")

    /**
     * The column <code>public.staff.last_update</code>.
     */
    val LAST_UPDATE: TableField<StaffRecord, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>public.staff.picture</code>.
     */
    val PICTURE: TableField<StaffRecord, ByteArray?> = createField(DSL.name("picture"), SQLDataType.BLOB, this, "")

    private constructor(alias: Name, aliased: Table<StaffRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<StaffRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.staff</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.staff</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.staff</code> table reference
     */
    constructor(): this(DSL.name("staff"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, StaffRecord>): this(Internal.createPathAlias(child, key), child, key, STAFF, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<StaffRecord, Int?> = super.getIdentity() as Identity<StaffRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<StaffRecord> = STAFF_PKEY
    override fun getReferences(): List<ForeignKey<StaffRecord, *>> = listOf(STAFF__STAFF_ADDRESS_ID_FKEY)

    private lateinit var _address: Address

    /**
     * Get the implicit join path to the <code>public.address</code> table.
     */
    fun address(): Address {
        if (!this::_address.isInitialized)
            _address = Address(this, STAFF__STAFF_ADDRESS_ID_FKEY)

        return _address;
    }
    override fun `as`(alias: String): Staff = Staff(DSL.name(alias), this)
    override fun `as`(alias: Name): Staff = Staff(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Staff = Staff(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Staff = Staff(name, null)

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row11<Int?, String?, String?, Short?, String?, Short?, Boolean?, String?, String?, LocalDateTime?, ByteArray?> = super.fieldsRow() as Row11<Int?, String?, String?, Short?, String?, Short?, Boolean?, String?, String?, LocalDateTime?, ByteArray?>
}
