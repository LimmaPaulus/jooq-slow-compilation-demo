/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables


import java.time.LocalDateTime
import java.time.LocalTime

import org.example.db.generated.Public
import org.example.db.generated.keys.CARS_STABLE_PK
import org.example.db.generated.tables.records.CarsStableRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CarsStable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CarsStableRecord>?,
    aliased: Table<CarsStableRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CarsStableRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.cars_stable</code>
         */
        val CARS_STABLE: CarsStable = CarsStable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CarsStableRecord> = CarsStableRecord::class.java

    /**
     * The column <code>public.cars_stable.manufacturer</code>.
     */
    val MANUFACTURER: TableField<CarsStableRecord, String?> = createField(DSL.name("manufacturer"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.cars_stable.weight</code>.
     */
    val WEIGHT: TableField<CarsStableRecord, Int?> = createField(DSL.name("weight"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cars_stable.model</code>.
     */
    val MODEL: TableField<CarsStableRecord, String?> = createField(DSL.name("model"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.cars_stable.id</code>.
     */
    val ID: TableField<CarsStableRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.cars_stable.creation_date</code>.
     */
    val CREATION_DATE: TableField<CarsStableRecord, LocalDateTime?> = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.cars_stable.last_usage_time</code>.
     */
    val LAST_USAGE_TIME: TableField<CarsStableRecord, LocalTime?> = createField(DSL.name("last_usage_time"), SQLDataType.LOCALTIME(6), this, "")

    /**
     * The column <code>public.cars_stable.speed</code>.
     */
    val SPEED: TableField<CarsStableRecord, Double?> = createField(DSL.name("speed"), SQLDataType.DOUBLE, this, "")

    private constructor(alias: Name, aliased: Table<CarsStableRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CarsStableRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.cars_stable</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.cars_stable</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.cars_stable</code> table reference
     */
    constructor(): this(DSL.name("cars_stable"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CarsStableRecord>): this(Internal.createPathAlias(child, key), child, key, CARS_STABLE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<CarsStableRecord> = CARS_STABLE_PK
    override fun `as`(alias: String): CarsStable = CarsStable(DSL.name(alias), this)
    override fun `as`(alias: Name): CarsStable = CarsStable(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): CarsStable = CarsStable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): CarsStable = CarsStable(name, null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<String?, Int?, String?, Int?, LocalDateTime?, LocalTime?, Double?> = super.fieldsRow() as Row7<String?, Int?, String?, Int?, LocalDateTime?, LocalTime?, Double?>
}
