/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables


import java.math.BigDecimal

import org.example.db.generated.Public
import org.example.db.generated.tables.records.SalesByFilmCategoryRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class SalesByFilmCategory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, SalesByFilmCategoryRecord>?,
    aliased: Table<SalesByFilmCategoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<SalesByFilmCategoryRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.view("create view \"sales_by_film_category\" as  SELECT c.name AS category,\n    sum(p.amount) AS total_sales\n   FROM (((((payment p\n     JOIN rental r ON ((p.rental_id = r.rental_id)))\n     JOIN inventory i ON ((r.inventory_id = i.inventory_id)))\n     JOIN film f ON ((i.film_id = f.film_id)))\n     JOIN film_category fc ON ((f.film_id = fc.film_id)))\n     JOIN category c ON ((fc.category_id = c.category_id)))\n  GROUP BY c.name\n  ORDER BY (sum(p.amount)) DESC;")
) {
    companion object {

        /**
         * The reference instance of <code>public.sales_by_film_category</code>
         */
        val SALES_BY_FILM_CATEGORY: SalesByFilmCategory = SalesByFilmCategory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<SalesByFilmCategoryRecord> = SalesByFilmCategoryRecord::class.java

    /**
     * The column <code>public.sales_by_film_category.category</code>.
     */
    val CATEGORY: TableField<SalesByFilmCategoryRecord, String?> = createField(DSL.name("category"), SQLDataType.VARCHAR(25), this, "")

    /**
     * The column <code>public.sales_by_film_category.total_sales</code>.
     */
    val TOTAL_SALES: TableField<SalesByFilmCategoryRecord, BigDecimal?> = createField(DSL.name("total_sales"), SQLDataType.NUMERIC, this, "")

    private constructor(alias: Name, aliased: Table<SalesByFilmCategoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<SalesByFilmCategoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.sales_by_film_category</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.sales_by_film_category</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.sales_by_film_category</code> table reference
     */
    constructor(): this(DSL.name("sales_by_film_category"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, SalesByFilmCategoryRecord>): this(Internal.createPathAlias(child, key), child, key, SALES_BY_FILM_CATEGORY, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun `as`(alias: String): SalesByFilmCategory = SalesByFilmCategory(DSL.name(alias), this)
    override fun `as`(alias: Name): SalesByFilmCategory = SalesByFilmCategory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): SalesByFilmCategory = SalesByFilmCategory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): SalesByFilmCategory = SalesByFilmCategory(name, null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<String?, BigDecimal?> = super.fieldsRow() as Row2<String?, BigDecimal?>
}
