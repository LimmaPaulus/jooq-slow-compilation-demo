/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables


import java.time.LocalDateTime
import java.time.LocalTime

import org.example.db.generated.Public
import org.example.db.generated.keys.CARS_PK
import org.example.db.generated.tables.records.CarsRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Cars(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CarsRecord>?,
    aliased: Table<CarsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CarsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.cars</code>
         */
        val CARS: Cars = Cars()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CarsRecord> = CarsRecord::class.java

    /**
     * The column <code>public.cars.manufacturer</code>.
     */
    val MANUFACTURER: TableField<CarsRecord, String?> = createField(DSL.name("manufacturer"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.cars.weight</code>.
     */
    val WEIGHT: TableField<CarsRecord, Int?> = createField(DSL.name("weight"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.cars.model</code>.
     */
    val MODEL: TableField<CarsRecord, String?> = createField(DSL.name("model"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.cars.id</code>.
     */
    val ID: TableField<CarsRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.cars.creation_date</code>.
     */
    val CREATION_DATE: TableField<CarsRecord, LocalDateTime?> = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.cars.last_usage_time</code>.
     */
    val LAST_USAGE_TIME: TableField<CarsRecord, LocalTime?> = createField(DSL.name("last_usage_time"), SQLDataType.LOCALTIME(6), this, "")

    /**
     * The column <code>public.cars.speed</code>.
     */
    val SPEED: TableField<CarsRecord, Double?> = createField(DSL.name("speed"), SQLDataType.DOUBLE, this, "")

    private constructor(alias: Name, aliased: Table<CarsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CarsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.cars</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.cars</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.cars</code> table reference
     */
    constructor(): this(DSL.name("cars"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CarsRecord>): this(Internal.createPathAlias(child, key), child, key, CARS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<CarsRecord> = CARS_PK
    override fun `as`(alias: String): Cars = Cars(DSL.name(alias), this)
    override fun `as`(alias: Name): Cars = Cars(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Cars = Cars(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Cars = Cars(name, null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<String?, Int?, String?, Int?, LocalDateTime?, LocalTime?, Double?> = super.fieldsRow() as Row7<String?, Int?, String?, Int?, LocalDateTime?, LocalTime?, Double?>
}
