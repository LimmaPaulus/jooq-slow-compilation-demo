/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables


import java.time.LocalDateTime

import kotlin.collections.List

import org.example.db.generated.Public
import org.example.db.generated.keys.FILM_CATEGORY_PKEY
import org.example.db.generated.keys.FILM_CATEGORY__FILM_CATEGORY_CATEGORY_ID_FKEY
import org.example.db.generated.keys.FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY
import org.example.db.generated.tables.records.FilmCategoryRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FilmCategory(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, FilmCategoryRecord>?,
    aliased: Table<FilmCategoryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<FilmCategoryRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.film_category</code>
         */
        val FILM_CATEGORY: FilmCategory = FilmCategory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<FilmCategoryRecord> = FilmCategoryRecord::class.java

    /**
     * The column <code>public.film_category.film_id</code>.
     */
    val FILM_ID: TableField<FilmCategoryRecord, Short?> = createField(DSL.name("film_id"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>public.film_category.category_id</code>.
     */
    val CATEGORY_ID: TableField<FilmCategoryRecord, Short?> = createField(DSL.name("category_id"), SQLDataType.SMALLINT.nullable(false), this, "")

    /**
     * The column <code>public.film_category.last_update</code>.
     */
    val LAST_UPDATE: TableField<FilmCategoryRecord, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<FilmCategoryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<FilmCategoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.film_category</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.film_category</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.film_category</code> table reference
     */
    constructor(): this(DSL.name("film_category"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, FilmCategoryRecord>): this(Internal.createPathAlias(child, key), child, key, FILM_CATEGORY, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getPrimaryKey(): UniqueKey<FilmCategoryRecord> = FILM_CATEGORY_PKEY
    override fun getReferences(): List<ForeignKey<FilmCategoryRecord, *>> = listOf(FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY, FILM_CATEGORY__FILM_CATEGORY_CATEGORY_ID_FKEY)

    private lateinit var _film: Film
    private lateinit var _category: Category

    /**
     * Get the implicit join path to the <code>public.film</code> table.
     */
    fun film(): Film {
        if (!this::_film.isInitialized)
            _film = Film(this, FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY)

        return _film;
    }

    /**
     * Get the implicit join path to the <code>public.category</code> table.
     */
    fun category(): Category {
        if (!this::_category.isInitialized)
            _category = Category(this, FILM_CATEGORY__FILM_CATEGORY_CATEGORY_ID_FKEY)

        return _category;
    }
    override fun `as`(alias: String): FilmCategory = FilmCategory(DSL.name(alias), this)
    override fun `as`(alias: Name): FilmCategory = FilmCategory(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): FilmCategory = FilmCategory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): FilmCategory = FilmCategory(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Short?, Short?, LocalDateTime?> = super.fieldsRow() as Row3<Short?, Short?, LocalDateTime?>
}
