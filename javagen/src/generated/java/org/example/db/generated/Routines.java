/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated;


import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;

import org.example.db.generated.enums.MpaaRating;
import org.example.db.generated.routines.GetCarModel;
import org.example.db.generated.routines.GetCustomerBalance;
import org.example.db.generated.routines.GroupConcat;
import org.example.db.generated.routines.InventoryHeldByCustomer;
import org.example.db.generated.routines.InventoryInStock;
import org.example.db.generated.routines.LastDay;
import org.example.db.generated.routines.PaymentFormSubmit;
import org.example.db.generated.routines._GroupConcat;
import org.example.db.generated.tables.FilmFormSubmit;
import org.example.db.generated.tables.FilmInStock;
import org.example.db.generated.tables.FilmNotInStock;
import org.example.db.generated.tables.RewardsReport;
import org.example.db.generated.tables.records.FilmFormSubmitRecord;
import org.example.db.generated.tables.records.FilmInStockRecord;
import org.example.db.generated.tables.records.FilmNotInStockRecord;
import org.example.db.generated.tables.records.RewardsReportRecord;
import org.jooq.AggregateFunction;
import org.jooq.Configuration;
import org.jooq.Field;
import org.jooq.Result;


/**
 * Convenience access to all stored procedures and functions in public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Routines {

    /**
     * Call <code>public._group_concat</code>
     */
    public static String _GroupConcat(
          Configuration configuration
        , String __1
        , String __2
    ) {
        _GroupConcat f = new _GroupConcat();
        f.set__1(__1);
        f.set__2(__2);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public._group_concat</code> as a field.
     */
    public static Field<String> _GroupConcat(
          String __1
        , String __2
    ) {
        _GroupConcat f = new _GroupConcat();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Get <code>public._group_concat</code> as a field.
     */
    public static Field<String> _GroupConcat(
          Field<String> __1
        , Field<String> __2
    ) {
        _GroupConcat f = new _GroupConcat();
        f.set__1(__1);
        f.set__2(__2);

        return f.asField();
    }

    /**
     * Call <code>public.get_car_model</code>
     */
    public static String getCarModel(
          Configuration configuration
        , Integer pCarId
    ) {
        GetCarModel p = new GetCarModel();
        p.setPCarId(pCarId);

        p.execute(configuration);
        return p.getPCarModel();
    }

    /**
     * Call <code>public.get_customer_balance</code>
     */
    public static BigDecimal getCustomerBalance(
          Configuration configuration
        , Integer pCustomerId
        , LocalDateTime pEffectiveDate
    ) {
        GetCustomerBalance f = new GetCustomerBalance();
        f.setPCustomerId(pCustomerId);
        f.setPEffectiveDate(pEffectiveDate);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.get_customer_balance</code> as a field.
     */
    public static Field<BigDecimal> getCustomerBalance(
          Integer pCustomerId
        , LocalDateTime pEffectiveDate
    ) {
        GetCustomerBalance f = new GetCustomerBalance();
        f.setPCustomerId(pCustomerId);
        f.setPEffectiveDate(pEffectiveDate);

        return f.asField();
    }

    /**
     * Get <code>public.get_customer_balance</code> as a field.
     */
    public static Field<BigDecimal> getCustomerBalance(
          Field<Integer> pCustomerId
        , Field<LocalDateTime> pEffectiveDate
    ) {
        GetCustomerBalance f = new GetCustomerBalance();
        f.setPCustomerId(pCustomerId);
        f.setPEffectiveDate(pEffectiveDate);

        return f.asField();
    }

    /**
     * Get <code>public.group_concat</code> as a field.
     */
    public static AggregateFunction<String> groupConcat(
          String __1
    ) {
        GroupConcat f = new GroupConcat();
        f.set__1(__1);

        return f.asAggregateFunction();
    }

    /**
     * Get <code>public.group_concat</code> as a field.
     */
    public static AggregateFunction<String> groupConcat(
          Field<String> __1
    ) {
        GroupConcat f = new GroupConcat();
        f.set__1(__1);

        return f.asAggregateFunction();
    }

    /**
     * Call <code>public.inventory_held_by_customer</code>
     */
    public static Integer inventoryHeldByCustomer(
          Configuration configuration
        , Integer pInventoryId
    ) {
        InventoryHeldByCustomer f = new InventoryHeldByCustomer();
        f.setPInventoryId(pInventoryId);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.inventory_held_by_customer</code> as a field.
     */
    public static Field<Integer> inventoryHeldByCustomer(
          Integer pInventoryId
    ) {
        InventoryHeldByCustomer f = new InventoryHeldByCustomer();
        f.setPInventoryId(pInventoryId);

        return f.asField();
    }

    /**
     * Get <code>public.inventory_held_by_customer</code> as a field.
     */
    public static Field<Integer> inventoryHeldByCustomer(
          Field<Integer> pInventoryId
    ) {
        InventoryHeldByCustomer f = new InventoryHeldByCustomer();
        f.setPInventoryId(pInventoryId);

        return f.asField();
    }

    /**
     * Call <code>public.inventory_in_stock</code>
     */
    public static Boolean inventoryInStock(
          Configuration configuration
        , Integer pInventoryId
    ) {
        InventoryInStock f = new InventoryInStock();
        f.setPInventoryId(pInventoryId);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.inventory_in_stock</code> as a field.
     */
    public static Field<Boolean> inventoryInStock(
          Integer pInventoryId
    ) {
        InventoryInStock f = new InventoryInStock();
        f.setPInventoryId(pInventoryId);

        return f.asField();
    }

    /**
     * Get <code>public.inventory_in_stock</code> as a field.
     */
    public static Field<Boolean> inventoryInStock(
          Field<Integer> pInventoryId
    ) {
        InventoryInStock f = new InventoryInStock();
        f.setPInventoryId(pInventoryId);

        return f.asField();
    }

    /**
     * Call <code>public.last_day</code>
     */
    public static LocalDate lastDay(
          Configuration configuration
        , LocalDateTime __1
    ) {
        LastDay f = new LastDay();
        f.set__1(__1);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.last_day</code> as a field.
     */
    public static Field<LocalDate> lastDay(
          LocalDateTime __1
    ) {
        LastDay f = new LastDay();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * Get <code>public.last_day</code> as a field.
     */
    public static Field<LocalDate> lastDay(
          Field<LocalDateTime> __1
    ) {
        LastDay f = new LastDay();
        f.set__1(__1);

        return f.asField();
    }

    /**
     * Call <code>public.payment_form_submit</code>
     */
    public static String paymentFormSubmit(
          Configuration configuration
        , String pIsNewRow
        , Integer pId
        , LocalDateTime pPaymentDate
        , LocalTime pPaymentTime
    ) {
        PaymentFormSubmit f = new PaymentFormSubmit();
        f.setPIsNewRow(pIsNewRow);
        f.setPId(pId);
        f.setPPaymentDate(pPaymentDate);
        f.setPPaymentTime(pPaymentTime);

        f.execute(configuration);
        return f.getReturnValue();
    }

    /**
     * Get <code>public.payment_form_submit</code> as a field.
     */
    public static Field<String> paymentFormSubmit(
          String pIsNewRow
        , Integer pId
        , LocalDateTime pPaymentDate
        , LocalTime pPaymentTime
    ) {
        PaymentFormSubmit f = new PaymentFormSubmit();
        f.setPIsNewRow(pIsNewRow);
        f.setPId(pId);
        f.setPPaymentDate(pPaymentDate);
        f.setPPaymentTime(pPaymentTime);

        return f.asField();
    }

    /**
     * Get <code>public.payment_form_submit</code> as a field.
     */
    public static Field<String> paymentFormSubmit(
          Field<String> pIsNewRow
        , Field<Integer> pId
        , Field<LocalDateTime> pPaymentDate
        , Field<LocalTime> pPaymentTime
    ) {
        PaymentFormSubmit f = new PaymentFormSubmit();
        f.setPIsNewRow(pIsNewRow);
        f.setPId(pId);
        f.setPPaymentDate(pPaymentDate);
        f.setPPaymentTime(pPaymentTime);

        return f.asField();
    }

    /**
     * Call <code>public.film_form_submit</code>.
     */
    public static Result<FilmFormSubmitRecord> filmFormSubmit(
          Configuration configuration
        , String pIsNewRow
        , String pTitle
        , String pDescription
        , Integer pLanguageId
        , Integer pReleaseYear
        , MpaaRating pRating
        , Double pRentalRate
        , Integer pId
    ) {
        return configuration.dsl().selectFrom(org.example.db.generated.tables.FilmFormSubmit.FILM_FORM_SUBMIT.call(
              pIsNewRow
            , pTitle
            , pDescription
            , pLanguageId
            , pReleaseYear
            , pRating
            , pRentalRate
            , pId
        )).fetch();
    }

    /**
     * Get <code>public.film_form_submit</code> as a table.
     */
    public static FilmFormSubmit filmFormSubmit(
          String pIsNewRow
        , String pTitle
        , String pDescription
        , Integer pLanguageId
        , Integer pReleaseYear
        , MpaaRating pRating
        , Double pRentalRate
        , Integer pId
    ) {
        return org.example.db.generated.tables.FilmFormSubmit.FILM_FORM_SUBMIT.call(
            pIsNewRow,
            pTitle,
            pDescription,
            pLanguageId,
            pReleaseYear,
            pRating,
            pRentalRate,
            pId
        );
    }

    /**
     * Get <code>public.film_form_submit</code> as a table.
     */
    public static FilmFormSubmit filmFormSubmit(
          Field<String> pIsNewRow
        , Field<String> pTitle
        , Field<String> pDescription
        , Field<Integer> pLanguageId
        , Field<Integer> pReleaseYear
        , Field<MpaaRating> pRating
        , Field<Double> pRentalRate
        , Field<Integer> pId
    ) {
        return org.example.db.generated.tables.FilmFormSubmit.FILM_FORM_SUBMIT.call(
            pIsNewRow,
            pTitle,
            pDescription,
            pLanguageId,
            pReleaseYear,
            pRating,
            pRentalRate,
            pId
        );
    }

    /**
     * Call <code>public.film_in_stock</code>.
     */
    public static Result<FilmInStockRecord> filmInStock(
          Configuration configuration
        , Integer pFilmId
        , Integer pStoreId
    ) {
        return configuration.dsl().selectFrom(org.example.db.generated.tables.FilmInStock.FILM_IN_STOCK.call(
              pFilmId
            , pStoreId
        )).fetch();
    }

    /**
     * Get <code>public.film_in_stock</code> as a table.
     */
    public static FilmInStock filmInStock(
          Integer pFilmId
        , Integer pStoreId
    ) {
        return org.example.db.generated.tables.FilmInStock.FILM_IN_STOCK.call(
            pFilmId,
            pStoreId
        );
    }

    /**
     * Get <code>public.film_in_stock</code> as a table.
     */
    public static FilmInStock filmInStock(
          Field<Integer> pFilmId
        , Field<Integer> pStoreId
    ) {
        return org.example.db.generated.tables.FilmInStock.FILM_IN_STOCK.call(
            pFilmId,
            pStoreId
        );
    }

    /**
     * Call <code>public.film_not_in_stock</code>.
     */
    public static Result<FilmNotInStockRecord> filmNotInStock(
          Configuration configuration
        , Integer pFilmId
        , Integer pStoreId
    ) {
        return configuration.dsl().selectFrom(org.example.db.generated.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
              pFilmId
            , pStoreId
        )).fetch();
    }

    /**
     * Get <code>public.film_not_in_stock</code> as a table.
     */
    public static FilmNotInStock filmNotInStock(
          Integer pFilmId
        , Integer pStoreId
    ) {
        return org.example.db.generated.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
            pFilmId,
            pStoreId
        );
    }

    /**
     * Get <code>public.film_not_in_stock</code> as a table.
     */
    public static FilmNotInStock filmNotInStock(
          Field<Integer> pFilmId
        , Field<Integer> pStoreId
    ) {
        return org.example.db.generated.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
            pFilmId,
            pStoreId
        );
    }

    /**
     * Call <code>public.rewards_report</code>.
     */
    public static Result<RewardsReportRecord> rewardsReport(
          Configuration configuration
        , Integer minMonthlyPurchases
        , BigDecimal minDollarAmountPurchased
    ) {
        return configuration.dsl().selectFrom(org.example.db.generated.tables.RewardsReport.REWARDS_REPORT.call(
              minMonthlyPurchases
            , minDollarAmountPurchased
        )).fetch();
    }

    /**
     * Get <code>public.rewards_report</code> as a table.
     */
    public static RewardsReport rewardsReport(
          Integer minMonthlyPurchases
        , BigDecimal minDollarAmountPurchased
    ) {
        return org.example.db.generated.tables.RewardsReport.REWARDS_REPORT.call(
            minMonthlyPurchases,
            minDollarAmountPurchased
        );
    }

    /**
     * Get <code>public.rewards_report</code> as a table.
     */
    public static RewardsReport rewardsReport(
          Field<Integer> minMonthlyPurchases
        , Field<BigDecimal> minDollarAmountPurchased
    ) {
        return org.example.db.generated.tables.RewardsReport.REWARDS_REPORT.call(
            minMonthlyPurchases,
            minDollarAmountPurchased
        );
    }
}
