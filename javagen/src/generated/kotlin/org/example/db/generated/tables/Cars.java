/*
 * This file is generated by jOOQ.
 */
package org.example.db.generated.tables;


import java.time.LocalDateTime;
import java.time.LocalTime;

import org.example.db.generated.Keys;
import org.example.db.generated.Public;
import org.example.db.generated.tables.records.CarsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cars extends TableImpl<CarsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cars</code>
     */
    public static final Cars CARS = new Cars();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarsRecord> getRecordType() {
        return CarsRecord.class;
    }

    /**
     * The column <code>public.cars.manufacturer</code>.
     */
    public final TableField<CarsRecord, String> MANUFACTURER = createField(DSL.name("manufacturer"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.cars.weight</code>.
     */
    public final TableField<CarsRecord, Integer> WEIGHT = createField(DSL.name("weight"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.cars.model</code>.
     */
    public final TableField<CarsRecord, String> MODEL = createField(DSL.name("model"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.cars.id</code>.
     */
    public final TableField<CarsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.cars.creation_date</code>.
     */
    public final TableField<CarsRecord, LocalDateTime> CREATION_DATE = createField(DSL.name("creation_date"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.cars.last_usage_time</code>.
     */
    public final TableField<CarsRecord, LocalTime> LAST_USAGE_TIME = createField(DSL.name("last_usage_time"), SQLDataType.LOCALTIME(6), this, "");

    /**
     * The column <code>public.cars.speed</code>.
     */
    public final TableField<CarsRecord, Double> SPEED = createField(DSL.name("speed"), SQLDataType.DOUBLE, this, "");

    private Cars(Name alias, Table<CarsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cars(Name alias, Table<CarsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.cars</code> table reference
     */
    public Cars(String alias) {
        this(DSL.name(alias), CARS);
    }

    /**
     * Create an aliased <code>public.cars</code> table reference
     */
    public Cars(Name alias) {
        this(alias, CARS);
    }

    /**
     * Create a <code>public.cars</code> table reference
     */
    public Cars() {
        this(DSL.name("cars"), null);
    }

    public <O extends Record> Cars(Table<O> child, ForeignKey<O, CarsRecord> key) {
        super(child, key, CARS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CarsRecord> getPrimaryKey() {
        return Keys.CARS_PK;
    }

    @Override
    public Cars as(String alias) {
        return new Cars(DSL.name(alias), this);
    }

    @Override
    public Cars as(Name alias) {
        return new Cars(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cars rename(String name) {
        return new Cars(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cars rename(Name name) {
        return new Cars(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Integer, String, Integer, LocalDateTime, LocalTime, Double> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
